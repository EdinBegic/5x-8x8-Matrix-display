#include <iostream>
#include <ctime>
#include <string>
#include <stdio.h>
#include <vector>
#include <bitset>
#include <cstdint>
#include <thread>
#include <chrono>
using namespace std;
const uint8_t ascii_niz[] =                        // Proširena ASCII tabela, znak se sastoji iz 8 bita
{
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 0x00
   0x7E, 0x81, 0x95, 0xB1, 0xB1, 0x95, 0x81, 0x7E, // 0x01
   0x7E, 0xFF, 0xEB, 0xCF, 0xCF, 0xEB, 0xFF, 0x7E, // 0x02
   0x0E, 0x1F, 0x3F, 0x7E, 0x3F, 0x1F, 0x0E, 0x00, // 0x03
   0x08, 0x1C, 0x3E, 0x7F, 0x3E, 0x1C, 0x08, 0x00, // 0x04
   0x18, 0xBA, 0xFF, 0xFF, 0xFF, 0xBA, 0x18, 0x00, // 0x05
   0x10, 0xB8, 0xFC, 0xFF, 0xFC, 0xB8, 0x10, 0x00, // 0x06
   0x00, 0x00, 0x18, 0x3C, 0x3C, 0x18, 0x00, 0x00, // 0x07
   0xFF, 0xFF, 0xE7, 0xC3, 0xC3, 0xE7, 0xFF, 0xFF, // 0x08
   0x00, 0x3C, 0x66, 0x42, 0x42, 0x66, 0x3C, 0x00, // 0x09
   0xFF, 0xC3, 0x99, 0xBD, 0xBD, 0x99, 0xC3, 0xFF, // 0x0A
   0x70, 0xF8, 0x88, 0x88, 0xFD, 0x7F, 0x07, 0x0F, // 0x0B
   0x00, 0x4E, 0x5F, 0xF1, 0xF1, 0x5F, 0x4E, 0x00, // 0x0C
   0xC0, 0xE0, 0xFF, 0x7F, 0x05, 0x05, 0x07, 0x07, // 0x0D
   0xC0, 0xFF, 0x7F, 0x05, 0x05, 0x65, 0x7F, 0x3F, // 0x0E
   0x99, 0x5A, 0x3C, 0xE7, 0xE7, 0x3C, 0x5A, 0x99, // 0x0F
   0x7F, 0x3E, 0x3E, 0x1C, 0x1C, 0x08, 0x08, 0x00, // 0x10
   0x08, 0x08, 0x1C, 0x1C, 0x3E, 0x3E, 0x7F, 0x00, // 0x11
   0x00, 0x24, 0x66, 0xFF, 0xFF, 0x66, 0x24, 0x00, // 0x12
   0x00, 0x5F, 0x5F, 0x00, 0x00, 0x5F, 0x5F, 0x00, // 0x13
   0x06, 0x0F, 0x09, 0x7F, 0x7F, 0x01, 0x7F, 0x7F, // 0x14
   0x40, 0xDA, 0xBF, 0xA5, 0xFD, 0x59, 0x03, 0x02, // 0x15
   0x00, 0x70, 0x70, 0x70, 0x70, 0x70, 0x70, 0x00, // 0x16
   0x80, 0x94, 0xB6, 0xFF, 0xFF, 0xB6, 0x94, 0x80, // 0x17
   0x00, 0x04, 0x06, 0x7F, 0x7F, 0x06, 0x04, 0x00, // 0x18
   0x00, 0x10, 0x30, 0x7F, 0x7F, 0x30, 0x10, 0x00, // 0x19
   0x08, 0x08, 0x08, 0x2A, 0x3E, 0x1C, 0x08, 0x00, // 0x1A
   0x08, 0x1C, 0x3E, 0x2A, 0x08, 0x08, 0x08, 0x00, // 0x1B
   0x3C, 0x3C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, // 0x1C
   0x08, 0x1C, 0x3E, 0x08, 0x08, 0x3E, 0x1C, 0x08, // 0x1D
   0x30, 0x38, 0x3C, 0x3E, 0x3E, 0x3C, 0x38, 0x30, // 0x1E
   0x06, 0x0E, 0x1E, 0x3E, 0x3E, 0x1E, 0x0E, 0x06, // 0x1F
   0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ' '
   0x00, 0x06, 0x5F, 0x5F, 0x06, 0x00, 0x00, 0x00, // '!'
   0x00, 0x07, 0x07, 0x00, 0x07, 0x07, 0x00, 0x00, // '"'
   0x14, 0x7F, 0x7F, 0x14, 0x7F, 0x7F, 0x14, 0x00, // '#'
   0x24, 0x2E, 0x6B, 0x6B, 0x3A, 0x12, 0x00, 0x00, // '$'
   0x46, 0x66, 0x30, 0x18, 0x0C, 0x66, 0x62, 0x00, // '%'
   0x30, 0x7A, 0x4F, 0x5D, 0x37, 0x7A, 0x48, 0x00, // '&'
   0x04, 0x07, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // '''
   0x00, 0x1C, 0x3E, 0x63, 0x41, 0x00, 0x00, 0x00, // '('
   0x00, 0x41, 0x63, 0x3E, 0x1C, 0x00, 0x00, 0x00, // ')'
   0x08, 0x2A, 0x3E, 0x1C, 0x1C, 0x3E, 0x2A, 0x08, // '*'
   0x08, 0x08, 0x3E, 0x3E, 0x08, 0x08, 0x00, 0x00, // '+'
   0x00, 0x80, 0xE0, 0x60, 0x00, 0x00, 0x00, 0x00, // ','
   0x08, 0x08, 0x08, 0x08, 0x08, 0x08, 0x00, 0x00, // '-'
   0x00, 0x00, 0x60, 0x60, 0x00, 0x00, 0x00, 0x00, // '.'
   0x60, 0x30, 0x18, 0x0C, 0x06, 0x03, 0x01, 0x00, // '/'
   0x3E, 0x7F, 0x71, 0x59, 0x4D, 0x7F, 0x3E, 0x00, // '0'
   0x40, 0x42, 0x7F, 0x7F, 0x40, 0x40, 0x00, 0x00, // '1'
   0x62, 0x73, 0x59, 0x49, 0x6F, 0x66, 0x00, 0x00, // '2'
   0x22, 0x63, 0x49, 0x49, 0x7F, 0x36, 0x00, 0x00, // '3'
   0x18, 0x1C, 0x16, 0x53, 0x7F, 0x7F, 0x50, 0x00, // '4'
   0x27, 0x67, 0x45, 0x45, 0x7D, 0x39, 0x00, 0x00, // '5'
   0x3C, 0x7E, 0x4B, 0x49, 0x79, 0x30, 0x00, 0x00, // '6'
   0x03, 0x03, 0x71, 0x79, 0x0F, 0x07, 0x00, 0x00, // '7'
   0x36, 0x7F, 0x49, 0x49, 0x7F, 0x36, 0x00, 0x00, // '8'
   0x06, 0x4F, 0x49, 0x69, 0x3F, 0x1E, 0x00, 0x00, // '9'
   0x00, 0x00, 0x66, 0x66, 0x00, 0x00, 0x00, 0x00, // ':'
   0x00, 0x80, 0xE6, 0x66, 0x00, 0x00, 0x00, 0x00, // ';'
   0x08, 0x1C, 0x36, 0x63, 0x41, 0x00, 0x00, 0x00, // '<'
   0x24, 0x24, 0x24, 0x24, 0x24, 0x24, 0x00, 0x00, // '='
   0x00, 0x41, 0x63, 0x36, 0x1C, 0x08, 0x00, 0x00, // '>'
   0x02, 0x03, 0x51, 0x59, 0x0F, 0x06, 0x00, 0x00, // '?'
   0x3E, 0x7F, 0x41, 0x5D, 0x5D, 0x1F, 0x1E, 0x00, // '@'
   0x7C, 0x7E, 0x13, 0x13, 0x7E, 0x7C, 0x00, 0x00, // 'A'
   0x41, 0x7F, 0x7F, 0x49, 0x49, 0x7F, 0x36, 0x00, // 'B'
   0x1C, 0x3E, 0x63, 0x41, 0x41, 0x63, 0x22, 0x00, // 'C'
   0x41, 0x7F, 0x7F, 0x41, 0x63, 0x3E, 0x1C, 0x00, // 'D'
   0x41, 0x7F, 0x7F, 0x49, 0x5D, 0x41, 0x63, 0x00, // 'E'
   0x41, 0x7F, 0x7F, 0x49, 0x1D, 0x01, 0x03, 0x00, // 'F'
   0x1C, 0x3E, 0x63, 0x41, 0x51, 0x73, 0x72, 0x00, // 'G'
   0x7F, 0x7F, 0x08, 0x08, 0x7F, 0x7F, 0x00, 0x00, // 'H'
   0x00, 0x41, 0x7F, 0x7F, 0x41, 0x00, 0x00, 0x00, // 'I'
   0x30, 0x70, 0x40, 0x41, 0x7F, 0x3F, 0x01, 0x00, // 'J'
   0x41, 0x7F, 0x7F, 0x08, 0x1C, 0x77, 0x63, 0x00, // 'K'
   0x41, 0x7F, 0x7F, 0x41, 0x40, 0x60, 0x70, 0x00, // 'L'
   0x7F, 0x7F, 0x0E, 0x1C, 0x0E, 0x7F, 0x7F, 0x00, // 'M'
   0x7F, 0x7F, 0x06, 0x0C, 0x18, 0x7F, 0x7F, 0x00, // 'N'
   0x1C, 0x3E, 0x63, 0x41, 0x63, 0x3E, 0x1C, 0x00, // 'O'
   0x41, 0x7F, 0x7F, 0x49, 0x09, 0x0F, 0x06, 0x00, // 'P'
   0x1E, 0x3F, 0x21, 0x71, 0x7F, 0x5E, 0x00, 0x00, // 'Q'
   0x41, 0x7F, 0x7F, 0x09, 0x19, 0x7F, 0x66, 0x00, // 'R'
   0x26, 0x6F, 0x4D, 0x59, 0x73, 0x32, 0x00, 0x00, // 'S'
   0x03, 0x41, 0x7F, 0x7F, 0x41, 0x03, 0x00, 0x00, // 'T'
   0x7F, 0x7F, 0x40, 0x40, 0x7F, 0x7F, 0x00, 0x00, // 'U'
   0x1F, 0x3F, 0x60, 0x60, 0x3F, 0x1F, 0x00, 0x00, // 'V'
   0x7F, 0x7F, 0x30, 0x18, 0x30, 0x7F, 0x7F, 0x00, // 'W'
   0x43, 0x67, 0x3C, 0x18, 0x3C, 0x67, 0x43, 0x00, // 'X'
   0x07, 0x4F, 0x78, 0x78, 0x4F, 0x07, 0x00, 0x00, // 'Y'
   0x47, 0x63, 0x71, 0x59, 0x4D, 0x67, 0x73, 0x00, // 'Z'
   0x00, 0x7F, 0x7F, 0x41, 0x41, 0x00, 0x00, 0x00, // '['
   0x01, 0x03, 0x06, 0x0C, 0x18, 0x30, 0x60, 0x00, // '\'
   0x00, 0x41, 0x41, 0x7F, 0x7F, 0x00, 0x00, 0x00, // ']'
   0x08, 0x0C, 0x06, 0x03, 0x06, 0x0C, 0x08, 0x00, // '^'
   0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, // '_'
   0x00, 0x00, 0x03, 0x07, 0x04, 0x00, 0x00, 0x00, // '`'
   0x20, 0x74, 0x54, 0x54, 0x3C, 0x78, 0x40, 0x00, // 'a'
   0x41, 0x7F, 0x3F, 0x48, 0x48, 0x78, 0x30, 0x00, // 'b'
   0x38, 0x7C, 0x44, 0x44, 0x6C, 0x28, 0x00, 0x00, // 'c'
   0x30, 0x78, 0x48, 0x49, 0x3F, 0x7F, 0x40, 0x00, // 'd'
   0x38, 0x7C, 0x54, 0x54, 0x5C, 0x18, 0x00, 0x00, // 'e'
   0x48, 0x7E, 0x7F, 0x49, 0x03, 0x02, 0x00, 0x00, // 'f'
   0x98, 0xBC, 0xA4, 0xA4, 0xF8, 0x7C, 0x04, 0x00, // 'g'
   0x41, 0x7F, 0x7F, 0x08, 0x04, 0x7C, 0x78, 0x00, // 'h'
   0x00, 0x44, 0x7D, 0x7D, 0x40, 0x00, 0x00, 0x00, // 'i'
   0x60, 0xE0, 0x80, 0x80, 0xFD, 0x7D, 0x00, 0x00, // 'j'
   0x41, 0x7F, 0x7F, 0x10, 0x38, 0x6C, 0x44, 0x00, // 'k'
   0x00, 0x41, 0x7F, 0x7F, 0x40, 0x00, 0x00, 0x00, // 'l'
   0x7C, 0x7C, 0x18, 0x38, 0x1C, 0x7C, 0x78, 0x00, // 'm'
   0x7C, 0x7C, 0x04, 0x04, 0x7C, 0x78, 0x00, 0x00, // 'n'
   0x38, 0x7C, 0x44, 0x44, 0x7C, 0x38, 0x00, 0x00, // 'o'
   0x84, 0xFC, 0xF8, 0xA4, 0x24, 0x3C, 0x18, 0x00, // 'p'
   0x18, 0x3C, 0x24, 0xA4, 0xF8, 0xFC, 0x84, 0x00, // 'q'
   0x44, 0x7C, 0x78, 0x4C, 0x04, 0x1C, 0x18, 0x00, // 'r'
   0x48, 0x5C, 0x54, 0x54, 0x74, 0x24, 0x00, 0x00, // 's'
   0x00, 0x04, 0x3E, 0x7F, 0x44, 0x24, 0x00, 0x00, // 't'
   0x3C, 0x7C, 0x40, 0x40, 0x3C, 0x7C, 0x40, 0x00, // 'u'
   0x1C, 0x3C, 0x60, 0x60, 0x3C, 0x1C, 0x00, 0x00, // 'v'
   0x3C, 0x7C, 0x70, 0x38, 0x70, 0x7C, 0x3C, 0x00, // 'w'
   0x44, 0x6C, 0x38, 0x10, 0x38, 0x6C, 0x44, 0x00, // 'x'
   0x9C, 0xBC, 0xA0, 0xA0, 0xFC, 0x7C, 0x00, 0x00, // 'y'
   0x4C, 0x64, 0x74, 0x5C, 0x4C, 0x64, 0x00, 0x00, // 'z'
   0x08, 0x08, 0x3E, 0x77, 0x41, 0x41, 0x00, 0x00, // ''
   0x00, 0x00, 0x00, 0x77, 0x77, 0x00, 0x00, 0x00, // '|'
   0x41, 0x41, 0x77, 0x3E, 0x08, 0x08, 0x00, 0x00, // '}'
   0x02, 0x03, 0x01, 0x03, 0x02, 0x03, 0x01, 0x00, // '~'
   0x70, 0x78, 0x4C, 0x46, 0x4C, 0x78, 0x70, 0x00  // 0x7F
};

char diodaOn = 'I';
char diodaOff = ' ';
void prikaziVektor(vector<uint8_t>&v4,vector<uint8_t>&v3,vector<uint8_t>&v2,vector<uint8_t>&v1,vector<uint8_t>&v0, int redni_broj_uredjaja)
{
                    cout <<"     5       4         3       2        1" << endl;

            for(int i = 1; i <= 8; i++)
            {
                int j = i - 1;
                bitset<8> x4(v4[j]);
                bitset<8> x3(v3[j]);
                bitset<8> x2(v2[j]);
                bitset<8> x1(v1[j]);
                bitset<8> x0(v0[j]);
                string s4 = x4.to_string();
                string s3 = x3.to_string();
                string s2 = x2.to_string();
                string s1 = x1.to_string();
                string s0 = x0.to_string();
                cout << "|";
                for(int k = 0; k < s4.length(); k++)
                {
                    if(s4[k] == '1')
                        cout << diodaOn;
                    else
                    cout << diodaOff;
                }
                cout << "|";
                for(int k = 0; k < s3.length(); k++)
                {
                    if(s3[k] == '1')
                        cout << diodaOn;
                    else
                    cout << diodaOff;
                }
                cout << "|";
                for(int k = 0; k < s2.length(); k++)
                {
                    if(s2[k] == '1')
                        cout << diodaOn;
                    else
                    cout << diodaOff;
                }
                cout << "|";
                for(int k = 0; k < s1.length(); k++)
                {
                    if(s1[k] == '1')
                        cout << diodaOn;
                    else
                    cout << diodaOff;
                }
                cout << "|";
                for(int k = 0; k < s0.length(); k++)
                {
                    if(s0[k] == '1')
                        cout << diodaOn;
                    else
                    cout << diodaOff;
                }
                cout << "|";

                cout << endl;
            }
}
void pomocnaShift(int shift_poz, int& vrijednost, bool prviDisplej)
{
            if(prviDisplej)
            {
                int maska0 = 0xFF << (7 - shift_poz);
                vrijednost = vrijednost & maska0;            // AND-ovanjem vrijednosti znaka i maske, dobijamo bit kojeg shiftamo
                vrijednost = vrijednost >> (7 - shift_poz); // posto je na suprotnom dijelu niza, potrebno je shiftati
            }
            else
            {
                int maska1 = 0xFF << 7;
                vrijednost = vrijednost & maska1;
                vrijednost = vrijednost >> 7;
            }
            vrijednost = vrijednost & 1;                // AND-ovanjem sa 1, osiguravamo da je nova vrijednost jedino taj bit kojeg prenosimo
}
 void popuniSveVektore(vector<uint8_t>&v4, vector<uint8_t>&v3,vector<uint8_t>&v2,vector<uint8_t>&v1,vector<uint8_t>&v0, int shift_poz, char znak)
        {
                                        // Maska nam sluzi da bi odredili koji bit iz niza kojeg citamo, šiftamo u red displeja
                                            // pri tome je obrnut raspored MSB i LSB kod pojedinih displeja
        for(int i=0;i<8;i++)            // Punimo sve redove odgovarajucim podacima
        {
                int vrijednost4=ascii_niz[znak*8+shift_poz]; // vrijednost reda krajnjeg displeja ocitavamo iz unosa korisnika
                int vrijednost3=v4[shift_poz];               // dok ostali displeji kupe vrijednost iz njima susjednog displeja
                int vrijednost2=v3[shift_poz];
                int vrijednost1=v2[shift_poz];
                int vrijednost0=v1[shift_poz];

                pomocnaShift(i,vrijednost4,true);
                pomocnaShift(i,vrijednost3,false);
                pomocnaShift(i,vrijednost2,false);
                pomocnaShift(i,vrijednost1,false);
                pomocnaShift(i,vrijednost0,false);

                v4[shift_poz] = v4[shift_poz] << 1;
                v3[shift_poz] = v3[shift_poz] << 1;
                v2[shift_poz] = v2[shift_poz] << 1;
                v1[shift_poz] = v1[shift_poz] << 1;
                v0[shift_poz] = v0[shift_poz] << 1;

                v4[shift_poz] = v4[shift_poz] | vrijednost4;
                v3[shift_poz] = v3[shift_poz] | vrijednost3;
                v2[shift_poz] = v2[shift_poz] | vrijednost2;
                v1[shift_poz] = v1[shift_poz] | vrijednost1;
                v0[shift_poz] = v0[shift_poz] | vrijednost0;
    }
}
 void prikaziStringScroll(const string& s)
{
            // Koristit æemo vectore kao kontenjersku klasu, koji æe èuvati trenutne vrijednosti za redove na displejima
            vector<uint8_t> displej0;
            vector<uint8_t> displej1;
            vector<uint8_t> displej2;
            vector<uint8_t> displej3;
            vector<uint8_t> displej4;

            // Na poèetku displeji su ugašeni
            for(int i = 0; i < 8; i++)
            {
                displej0.push_back(0);
                displej1.push_back(0);
                displej2.push_back(0);
                displej3.push_back(0);
                displej4.push_back(0);

            }
            prikaziVektor(displej4,displej3,displej2,displej1,displej0, 0);
            for(int i = 0; i < s.length(); i++)
            {
                for(int j = 0; j <= 8; j++)
                {
                    popuniSveVektore(displej4, displej3,displej2,displej1,displej0,j,s[i]); // j æe nam sluziti kao kursor na poziciju bita kojeg
                                                                                           // pomjeramo ulijevo
                    if(j==8) // Provjeriti moze li i bez ovog if-a
                        popuniSveVektore(displej4,displej3,displej2,displej1,displej0,7,' ');
                    prikaziVektor(displej0,displej1,displej2,displej3,displej4, 0);
                    this_thread::sleep_for(chrono::milliseconds(300));
                    cout << endl;
                }
            }
}
int main()
{
    cout << "unesite string : ";
    string s;
    getline(cin, s);
    for(int i = 0; i < 4; i++)
        s.push_back(' ');
  while(1)
  {
    prikaziStringScroll(s);
  }
}
